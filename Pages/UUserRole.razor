@page "/uuserrole"
@page "/uuserrole/{id:int}"
@using CardsCustomers.Models.Services;
@using CardsCustomers.Models;
@inject IUserRoleService UserRoleService
@inject NavigationManager NavigationManager

<button type="submit" class="btn btn-outline-primary"
        @onclick="@(() => BackToUserRoles())">
    Back to User Roles
</button>
<br />
@if (Id is null)
{
    <PageTitle>Create a new User Role </PageTitle>
    <h3 class="text-center">Create a User Role</h3>
}
else
{
    <PageTitle>Edit  </PageTitle>
    <h3 class="text-center">Edit @UserRole.Role</h3>
}

<EditForm Model="UserRole" OnSubmit="HandleSubmit">
    <br />
    <div class="row mt-3">
        <label for="roleId" class="col-sm-2 col-form-label">
            Role
        </label>
        <div class="col-sm-4">
            <InputText id="roleId" class="form-control"
                       @bind-Value="UserRole.Role" />
        </div>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    UserRole UserRole = new UserRole();
    public IEnumerable<UserRole> AllUserRole { get; set; }



    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Id is not null)
            {
                var result = UserRoleService.GetUserRoleById(Id);
                if (result is not null)
                {
                    UserRole = result;
                }
                else
                {
                    NavigationManager.NavigateTo("/uuserrole");
                }
            }
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }
    protected override void OnInitialized()
    {
        try
        {
            btnText = Id == null ? "Save new User Role" : "Update User Role";
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }



    }

    public string FormSubmitMessage { get; set; } = "Form Data Not Submitted";


    async Task HandleSubmit()
    {
        try
        {
            if (Id is null)
            {
                UserRoleService.CreateUserRole(UserRole);
            }
            else
            {
                UserRoleService.UpdateUserRole((int)Id, UserRole);
            }
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }
    public void BackToUserRoles()
    {
        try
        {
            NavigationManager.NavigateTo("/usersroles");
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }

    //public void HandleValidSubmit()
    //{
    //    btnText = Id == null ? "Save new Customer" : "Update Customer";
    //    Context.Add(CustomerService);
    //    Context.SaveChanges();
    //    FormSubmitMessage = "Form Data Submitted";
    //}

    //public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Data Submitted";
}
