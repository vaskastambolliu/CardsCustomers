@page "/Discounts"
@using CardsCustomers.Models.Services;
@using CardsCustomers.Models;
@inject IDiscountService DiscountService
@inject IPointsPerMoneyService PointsPerMoneyService
@inject ICurrencyService CurrencyService
@inject NavigationManager NavigationManager


<PageTitle>Discount</PageTitle>

<h1>Discounts</h1>

<p>This is the list of registrated Discounts.</p>
<br />
<button class="btn btn-sm  btn-primary" @onclick="@(() => CreateNewDiscount())">Create Discount</button>
<br />
@if (AllDiscounts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Discount Name</th>
                <th>Points Needed</th>
                <th>Discount %</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Discount discount in AllDiscounts)
            {
                <tr>
                    <td><a class="btn btn-sm btn-warning" href="/DDiscount/@discount.IdDiscount">Edit</a></td>
                    <td>@discount.DiscountName</td>
                    <td>@discount.PointsNeeded</td>
                    <td>@discount.DiscountPercent</td>

                    <td>
                        <button class="btn btn-sm btn-danger"
                        @onclick="@(() => DeleteDiscount(discount.IdDiscount))">
                            Delete
                        </button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}


<EditForm Model="PointsPerMoney">


    <div class="row mt-3">
        <label for="PointGainSystem" class="col-sm-2 col-form-label">
            Point Gain System
        </label>
        <div class="col-sm-2">
            <InputNumber id="PointsPerMoneyValue" class="form-control"
                         @bind-Value="PointsPerMoney.PointsPerMoneyValue" />
        </div>

        <div class="col-sm-2">
            <span class="text-success"> pt = 1 (ALL)</span>
        </div>

        <div class="col-sm-1">
            <button type="submit" @onclick="@(() => SavePointsperMoney(PointsPerMoney))" class="btn btn-success">Save</button>
        </div>
    </div>


 @*   <div class="row mt-3">
        <label for="client" class="col-sm-2 col-form-label">Currency</label>
        <div class="col-sm-2">
            <InputSelect id="currency" @bind-Value="@IdCurrency"  class="form-select">

                <option value="-1"> -- Select -- </option>

                @foreach (var curr in AllCurrency)
                {
                    <option value="@curr.IdCurrency">@curr.CurrencyName</option>
                }

            </InputSelect>
        </div>

        <div class="col-sm-2">
            <a class="btn btn-sm  btn-primary" href="/ccurrency">Create Currency</a>
          @*  <button type="submit" @onclick="@(() => CreateNewCurrency())" class="btn btn-success">Create Currency</button>*@
@*        </div>
    </div>*@

</EditForm>

@code {
    public IEnumerable<Discount> AllDiscounts { get; set; }
    public PointsPerMoney PointsPerMoney = new PointsPerMoney();
    public IEnumerable<PointsPerMoney> AllPointsPerMoney { get; set; }
    public int? IdCurrency { get; set; }
    public IEnumerable<Currency> AllCurrency { get; set; }

    protected override void OnInitialized()
    {
        AllDiscounts = DiscountService.GetAllDiscount();
        AllPointsPerMoney = PointsPerMoneyService.GetAllPointsPerMoney();
        if (AllPointsPerMoney is not null && AllPointsPerMoney.ToList().Count > 0)
        {
            PointsPerMoney.PointsPerMoneyValue = PointsPerMoneyService.GetLastPointPerMoneySaved();
        }
        AllCurrency = CurrencyService.GetAllCurrency();
        if (AllCurrency is not null && AllCurrency.ToList().Count>0)
        {
            IdCurrency = CurrencyService.GetLastCurrencySaved();
        }
    }

    public void DeleteDiscount(int id)
    {
        DiscountService.DeleteDiscount(id);
    }

    void CreateNewDiscount()
    {
        NavigationManager.NavigateTo("/ddiscount");
    }

    public void SavePointsperMoney(PointsPerMoney PointsPerMoney)
    {
        PointsPerMoneyService.CreatePointsPerMoney(PointsPerMoney);
    }


    //public void CreateNewCurrency()
    //{
    //    NavigationManager.NavigateTo("/ccurrency");
    //}
    //async Task HandleSubmit()
    //{

    //}
}
