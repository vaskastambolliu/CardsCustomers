@page "/ddiscount"
@page "/ddiscount/{id:int}"
@using CardsCustomers.Models.Services;
@using CardsCustomers.Models;
@inject IDiscountService DiscountService
@inject NavigationManager NavigationManager

<button type="submit" class="btn btn-outline-primary"
        @onclick="@(() => BackToDiscounts())">
    Back to Discounts
</button>
<br />
@if (Id is null)
{
    <PageTitle>Create a new Discount </PageTitle>
    <h3 class="text-center">Create a New Discount</h3>
}
else
{
    <PageTitle>Edit  </PageTitle>
    <h3 class="text-center">Edit @Discount.DiscountName</h3>
}

<EditForm Model="Discount" OnSubmit="HandleSubmit">
    <br />
    <div class="row mt-3">
        <label for="cardId" class="col-sm-2 col-form-label">
            Discount Name
        </label>
        <div class="col-sm-4">
            <InputText id="DiscountName" class="form-control"
                       @bind-Value="Discount.DiscountName" />
        </div>
    </div>
    <div class="row mt-3">
        <label for="points" class="col-sm-2 col-form-label">
            Points Needed
        </label>
        <div class="col-sm-4">
            <InputNumber id="PointsNeeded" class="form-control"
                         @bind-Value="Discount.PointsNeeded" />
        </div>
    </div>
    <div class="row mt-3">
        <label for="DiscountPercent" class="col-sm-2 col-form-label">
            Discount Percent
        </label>
        <div class="col-sm-4">
            <InputNumber id="DiscountPercent" class="form-control"
                         @bind-Value="Discount.DiscountPercent" />
        </div>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    [Inject]
    DbCoreloginContext Context { get; set; }
    Discount Discount = new Discount();
    public IEnumerable<Discount> AllDiscounts { get; set; }



    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Id is not null)
            {
                var result = DiscountService.GetDiscountById(Id);
                if (result is not null)
                {
                    Discount = result;
                }
                else
                {
                    NavigationManager.NavigateTo("/ddiscount");
                }
            }
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }
    protected override void OnInitialized()
    {
        try
        {
            btnText = Id == null ? "Save new Discount" : "Update Discount";
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }



    }

    public string FormSubmitMessage { get; set; } = "Form Data Not Submitted";


    async Task HandleSubmit()
    {
        try
        {
            if (Id is null)
            {
                DiscountService.CreateDiscount(Discount);
            }
            else
            {
                DiscountService.UpdateDiscount((int)Id, Discount);
            }
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }
    public void BackToDiscounts()
    {
        try
        {
            NavigationManager.NavigateTo("/discounts");
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }
    
    }

    //public void HandleValidSubmit()
    //{
    //    btnText = Id == null ? "Save new Customer" : "Update Customer";
    //    Context.Add(CustomerService);
    //    Context.SaveChanges();
    //    FormSubmitMessage = "Form Data Submitted";
    //}

    //public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Data Submitted";
}
