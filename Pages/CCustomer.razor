@page "/ccustomer"
@page "/ccustomer/{id:int}"
@using CardsCustomers.Models.Services;
@using CardsCustomers.Models;
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _authenticationStateProvider

@*<h3>Customer</h3>*@
<button type="submit" class="btn btn-outline-primary"
        @onclick="@(() => BackToCustomers())">
    Back to Customers
</button>
<br />
@if (Id is null)
{
    <PageTitle>Create a new Customer </PageTitle>
    <h3 class="text-center">Create a New Customer</h3>
}
else
{
    <PageTitle>Edit  </PageTitle>
    <h3 class="text-center">Edit @Customer.Name @Customer.Surname</h3>
}

<EditForm Model="Customer" OnSubmit="HandleSubmit">
    <br />


    <div class="row mt-3">
        <label for="Name" class="col-sm-2 col-form-label">
            Name
        </label>
        <div class="col-sm-4">
            <InputText id="newvalue" required class="form-control"
                       @bind-Value="Customer.Name" />
        </div>
    </div>





    <div class="row mt-3">
        <label for="Surname" class="col-sm-2 col-form-label">
            Surname
        </label>
        <div class="col-sm-4">
            <InputText id="Surname" required class="form-control"
                       @bind-Value="Customer.Surname" />
        </div>
    </div>






    @foreach (var model in models)
    {
        <div class="row mt-3">
            <label for="Gender" class="col-sm-2 col-form-label">
                Gender
            </label>
            <div class="col-sm-4">
                <InputRadioGroup @bind-Value="Customer.Gender">
                    @foreach (var option in model.Options)
                    {
                        <div>
                            <InputRadio required Value="option.Value" /> @option.Value
                        </div>
                    }
                </InputRadioGroup>
               @* <div>
                    Selected: @model.Selected
                </div>*@
            </div>
        </div>
    }


    <div class="row mt-3">
        <label for="DateOfBirth" class="col-sm-2 col-form-label">
            Birth Date
        </label>
        <div class="col-sm-4">
            <InputDate id="DateOfBirth" required class="form-control"
                       @bind-Value="Customer.DateOfBirth" />
        </div>
    </div>






    <div class="row mt-3">
        <label for="Email" class="col-sm-2 col-form-label">
            Email
        </label>
        <div class="col-sm-4">
            <InputText id="Email" required class="form-control"
                       @bind-Value="Customer.Email" />
        </div>
    </div>





    <div class="row mt-3">
        <label for="Phone" class="col-sm-2 col-form-label">
            Phone
        </label>
        <div class="col-sm-4">
            <InputText id="Phone" required class="form-control"
                       @bind-Value="Customer.Phone" />
        </div>
    </div>





    <div class="row mt-3">
        <label for="TimeStampIdCard" class="col-sm-2 col-form-label">
            Card Nr.
        </label>
        <div class="col-sm-4">
            <InputText disabled="true"  id="TimeStampIdCard" class="form-control"
                       @bind-Value="Customer.TimeStampIdCard" />
        </div>
    </div>





    <div class="row mt-3">
        <label for="Points" class="col-sm-2 col-form-label">
            Points
        </label>
        <div class="col-sm-4">
            <InputNumber disabled="true" id="Points" class="form-control"
                         @bind-Value="Customer.Points" />
        </div>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    [Inject]
    DbCoreloginContext Context { get; set; }
    Customer Customer = new Customer();
    public IEnumerable<Customer> AllCustomers { get; set; }
    private List<ModelGender> models;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Id is not null)
            {
                var result = CustomerService.GetCustomerById(Id);
                if (result is not null)
                {
                    Customer = result;
                }
                else
                {
                    NavigationManager.NavigateTo("/ccustomer");
                }
            }
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }
    protected override void OnInitialized()
    {
        try
        {
            btnText = Id == null ? "Save new Customer" : "Update Customer";
            Customer.TimeStampIdCard = CustomerService.GetTimestamp(DateTime.Now);
            models = Models;
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }

    public string FormSubmitMessage { get; set; } = "Form Data Not Submitted";


    async Task HandleSubmit()
    {
        try
        {
            if (Id is null)
            {
                var authstate = await _authenticationStateProvider.GetAuthenticationStateAsync();
                var user = authstate.User;
                var name = user.Identity.Name;
                Customer.IdUserAdmin = CustomerService.GetCustomerByUserName(name.ToString());
                CustomerService.CreateCustomer(Customer);
            }
            else
            {
                CustomerService.UpdateCustomer((int)Id, Customer);
            }
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }
    public void BackToCustomers()
    {
        try
        {
            NavigationManager.NavigateTo("/customers");
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }

    public List<ModelGender> Models => new List<ModelGender>()
    {
        new ModelGender() { Value = "Fred"}
        //new ModelGender() { Value = "Jon"},
     };
    public class ModelOptionsGender
    {
        public string Value { get; set; }
        public bool Selected
        {
            get => _Selected;
            set
            {
                _Selected = value;
            }
        }
        public bool _Selected;
    }

    public class ModelGender
    {
        public string Value { get; set; }
        public string Selected { get; set; }
        public List<ModelOptionsGender> Options { get; set; } = new List<ModelOptionsGender>()
        {
            new ModelOptionsGender() {Value="Male", Selected=true},
            new ModelOptionsGender() {Value="Female", Selected=false},
            new ModelOptionsGender() {Value="Other", Selected=false},

        };
    }
    //public void HandleValidSubmit()
    //{
    //    btnText = Id == null ? "Save new Customer" : "Update Customer";
    //    Context.Add(CustomerService);
    //    Context.SaveChanges();
    //    FormSubmitMessage = "Form Data Submitted";
    //}

    //public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Data Submitted";
}
