@page "/"
@*@using ChartJs.Blazor.PieChart*@
@using CardsCustomers.Models.ChartsModels;
@using CardsCustomers.Models.Services;
@inject ICustomerService CustomerService
@inject ITransactionService TransactionService
@using CardsCustomers.Models;
<PageTitle>Index</PageTitle>



<h1>Charts!</h1>
<LineChart @ref="lineChart" Width="800" Class="mb-4" />
@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    public List<TransactionsPerMonth> ListPurchaseMonths = new List<TransactionsPerMonth>();

    protected override void OnInitialized()
    {
        PurchaseChartRender();
        ClientsChartRender();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public void PurchaseChartRender()
    {
        var colors = ColorBuilder.CategoricalTwelveColors;

        ListPurchaseMonths = TransactionService.GetPurchaseForMonth(Convert.ToString(DateTime.Now.Year));
        var datasets = new List<IChartDataset>();
        dynamic labels = null;
        labels = GetMonthPurchaseForTransactions();

        var dataset1 = new LineChartDataset
            {
                Label = "Purchase",
                Data = GetPurchaseForTransactions(),
                BackgroundColor = new List<string> { colors[0] },
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 }

            };

        datasets.Add(dataset1);



        chartData = new ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction
            {
                Mode = InteractionMode.Index
            };

        lineChartOptions.Scales.X.Title.Text = Convert.ToString(DateTime.Now.Year);
        lineChartOptions.Scales.X.Title.Display = true;

        lineChartOptions.Scales.Y.Title.Text = "Purchase Amount";
        lineChartOptions.Scales.Y.Title.Display = true;

        lineChartOptions.Plugins.Title.Text = "Purchase Per Month";
        lineChartOptions.Plugins.Title.Display = true;
    }

    public void ClientsChartRender()
    {
        var colors = ColorBuilder.CategoricalTwelveColors;

        ListPurchaseMonths = TransactionService.GetPurchaseForMonth(Convert.ToString(DateTime.Now.Year));
        var datasets = new List<IChartDataset>();
        dynamic labels = null;
        labels = GetMonthPurchaseForTransactions();

        var dataset1 = new LineChartDataset
            {
                Label = "Purchase",
                Data = GetPurchaseForTransactions(),
                BackgroundColor = new List<string> { colors[0] },
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 }

            };

        datasets.Add(dataset1);



        chartData = new ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction
            {
                Mode = InteractionMode.Index
            };

        lineChartOptions.Scales.X.Title.Text = Convert.ToString(DateTime.Now.Year);
        lineChartOptions.Scales.X.Title.Display = true;

        lineChartOptions.Scales.Y.Title.Text = "Purchase Amount";
        lineChartOptions.Scales.Y.Title.Display = true;

        lineChartOptions.Plugins.Title.Text = "Purchase Per Month";
        lineChartOptions.Plugins.Title.Display = true;
    }

    public List<double> GetPurchaseForTransactions()
    {
        List<double> purchaseresult = new List<double>();
        foreach (var item in ListPurchaseMonths)
        {
            purchaseresult.Add(Convert.ToDouble(item.Purchasep));
        }
        return purchaseresult;
    }
    public List<string> GetMonthPurchaseForTransactions()
    {
        List<string> monthresult = new List<string>();
        foreach (var item in ListPurchaseMonths)
        {
            monthresult.Add(Convert.ToString(item.monthp));
        }
        return monthresult;
    }
}
