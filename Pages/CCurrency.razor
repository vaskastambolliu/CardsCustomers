@page "/ccurrency"
@page "/ccurrency/{id:int}"
@using CardsCustomers.Models.Services;
@using CardsCustomers.Models;
@inject ICurrencyService CurrencyService
@inject NavigationManager NavigationManager

<button type="submit" class="btn btn-outline-primary"
        @onclick="@(() => BackToDiscounts())">
    Back to Discounts
</button>
<br/>
@if (Id is null)
{
    <PageTitle >Create a new Currency </PageTitle>
    <h3 class="text-center">Create a New Currency</h3>
}
else
{
    <PageTitle>Edit  </PageTitle>
    <h3 class="text-center">Edit @Currency.CurrencyName</h3>
}

<EditForm Model="Currency" OnSubmit="HandleSubmit">
    <br />
    <div class="row mt-3">
        <label for="cardId" class="col-sm-2 col-form-label">
            Currency Name
        </label>
        <div class="col-sm-4">
            <InputText id="CurrencyName" class="form-control"
                       @bind-Value="Currency.CurrencyName"  />
        </div>
    </div>
   
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    Currency Currency = new Currency();
    public IEnumerable<Currency> AllCurrency { get; set; }
   


    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = CurrencyService.GetCurrencyById(Id);
            if (result is not null)
            {
                Currency = result;
            }
            else
            {
                NavigationManager.NavigateTo("/ddiscount");
            }
        }
    }
    protected override void OnInitialized()
    {
        btnText = Id == null ? "Save new Currency" : "Update Currency";
       

    }

    public string FormSubmitMessage { get; set; } = "Form Data Not Submitted";


    async Task HandleSubmit()
    {
        if (Id is null)
        {
            CurrencyService.CreateCurrency(Currency);
        }
        else
        {
            CurrencyService.UpdateCurrency((int)Id, Currency);
        }
    }
    public void BackToDiscounts()
    {
        NavigationManager.NavigateTo("/discounts");
    }

    //public void HandleValidSubmit()
    //{
    //    btnText = Id == null ? "Save new Customer" : "Update Customer";
    //    Context.Add(CustomerService);
    //    Context.SaveChanges();
    //    FormSubmitMessage = "Form Data Submitted";
    //}

    //public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Data Submitted";
}
