@page "/transactions"
@using CardsCustomers.Models.Services;
@using CardsCustomers.Models;
@inject ITransactionService TransactionService
@inject NavigationManager NavigationManager


<PageTitle>Transactions</PageTitle>

<h1>Transactions</h1>

<p>This is the list of registrated Transactions.</p>
<br />
<button class="btn btn-sm  btn-primary" @onclick="@(() => CreateNewTransaction())">Create Transaction</button>
<br />
@if (AllTransactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>
                <th>Surname</th>
                <th>Date</th>
                <th>Card</th>
                <th>Purchase</th>
                <th>Discount</th>
                <th>Points</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (@TransactionService.TransactionWithDetail transaction in AllTransactions)
            {
                <tr>
                    <td><a class="btn btn-sm btn-warning" href="/ttransaction/@transaction.transaction.IdTransaction">View</a></td>
                    <td>@Convert.ToString(@transaction.customer.Name)</td>
                    <td>@Convert.ToString(@transaction.customer.Surname)</td>
                    <td>@transaction.transaction.InsertDate.ToShortDateString()</td>
                    <td>@Convert.ToString(@transaction.customer.TimeStampIdCard)</td>
                    <td>@Convert.ToInt32(@transaction.transaction.Purchase)</td>
                    <td>@Convert.ToInt32(@transaction.transaction.Discount)</td>
                    <td>@Convert.ToInt32(@transaction.customer.Points)</td>
                    <td>
                        <button class="btn btn-sm btn-danger"
                        @onclick="@(() => DeleteTransaction(transaction.transaction.IdTransaction))">
                            Delete
                        </button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}

@code {
    public IEnumerable<dynamic> AllTransactions { get; set; }
    protected override void OnInitialized()
    {
        try
        {
            AllTransactions = TransactionService.GetAllTransactions().ToList();
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }


    }

    public void DeleteTransaction(int id)
    {
        try
        {
            TransactionService.DeleteTransaction(id);
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }


    }

    void CreateNewTransaction()
    {
        try
        {
            NavigationManager.NavigateTo("/ttransaction");
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }
}
