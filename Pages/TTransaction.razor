@page "/ttransaction"
@page "/ttransaction/{id:int}"
@using CardsCustomers.Models.Services;
@using CardsCustomers.Models;
@using Microsoft.AspNetCore.Mvc.Rendering;
@inject ITransactionService TransactionService
@inject ICustomerService CustomerService
@inject IPointsPerMoneyService PointsPerMoneyService
@inject IDiscountService DiscountService
@inject NavigationManager NavigationManager

@*<h3>Customer</h3>*@
<button type="submit" class="btn btn-outline-primary"
        @onclick="@(() => BackToTransactions())">
    Back to Transactions
</button>
<br />
@if (Id is null)
{
    <PageTitle>Create a new Transaction </PageTitle>
    <h3 class="text-center">Create a New Transaction</h3>
}
else
{
    <PageTitle>Edit Transaction </PageTitle>
    <h3 class="text-center">Edit Transaction</h3>
}

<EditForm Model="Transaction" OnSubmit="HandleSubmit">

    <hr />

    <div class="row mt-3">
        <label for="client" class="col-sm-2 col-form-label">Client</label>
        <div class="col-sm-4">
            <InputSelect id="client" @bind-Value="Transaction.IdCustomer" @oninput="CustomerFromDdw" class="form-select">
                <option value="-1"> -- Select -- </option>
                @foreach (var cust in CustomerList)
                {
                    <option value="@cust.IdCustomer">@cust.Name</option>
                }

            </InputSelect>
        </div>
    </div>

    <div class="row mt-3">
        <label for="cardId" class="col-sm-2 col-form-label">
            Card Id
        </label>
        <div class="col-sm-4">
            <InputText id="cardId" class="form-control"
                       @bind-Value="Transaction.IdCard" readonly="@true" />
        </div>
    </div>
    <div class="row mt-3">
        <label for="points" class="col-sm-2 col-form-label">
            Points
        </label>
        <div class="col-sm-4">
            <InputNumber id="points" class="form-control"
                         @bind-Value="Transaction.Points" readonly="@true" />
        </div>
    </div>
    <div class="row mt-3">
        <label for="purchase" class="col-sm-2 col-form-label">
            Purchase
        </label>
        <div class="col-sm-4">
            <InputNumber id="purchase" class="form-control"
                         @bind-Value="Transaction.Purchase" @oninput="CalculateDiscount"
                         required="@true" />
        </div>
    </div>

    <div class="row mt-3">
        <label for="discount" class="col-sm-2 col-form-label">
            Discount
        </label>
        <div class="col-sm-4">
            <InputSelect id="discount" @bind-Value="Transaction.Discount" @oninput="DiscountFromDdw" class="form-select">
                <option value="-1"> -- Select -- </option>
                @foreach (var disc in DiscountList)
                {
                    <option value="@disc.IdDiscount">@disc.DiscountName</option>
                }

            </InputSelect>
        </div>

        <label for="points" class="col-sm-2 col-form-label">
            Points of This Purchase
        </label>
        <div class="col-sm-2">
            <InputNumber id="points" class="form-control"
                         @bind-Value="@PointOfCurrentTransaction" readonly="@true" />
        </div>
    </div>

    <div class="row mt-3">
        <label for="newvalue" class="col-sm-2 col-form-label">
            New Value
        </label>
        <div class="col-sm-4">
            <InputNumber id="newvalue" class="form-control"
                         @bind-Value="Transaction.NewValue" />
        </div>
    </div>

    <div class="row mt-3">
        <label for="balance" class="col-sm-2 col-form-label">
            Balance
        </label>
        <div class="col-sm-4">
            <InputNumber id="balance" class="form-control"
                         @bind-Value="Transaction.Balance"  />
        </div>
    </div>
    <div class="col-sm-2 row mt-3"> <button type="submit" class="btn btn-primary">@btnText</button></div>

</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    int PointOfCurrentTransaction = 0;
    [Inject]
    DbCoreloginContext Context { get; set; }
    Transaction Transaction = new Transaction();
    public IEnumerable<Transaction> AllTransactions { get; set; }
    public List<Customer> CustomerList { get; set; } = new List<Customer>();
    public IEnumerable<Discount> DiscountList { get; set; } = new List<Discount>();

    public string IdCustomer { get; set; }
    public string IdDiscount { get; set; }
    private string IdCustomerValueDdw { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = TransactionService.GetTransactionById(Id);
            if (result is not null)
            {
                Transaction = result;
            }
            else
            {
                NavigationManager.NavigateTo("/ttransaction");
            }
        }
    }
    protected async override Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save new Transaction" : "Update Transaction";

        CustomerList = (await TransactionService.GetCustomers()).ToList();
        IdCustomer = Transaction.IdCustomer.ToString();
    }

    public string FormSubmitMessage { get; set; } = "Form Data Not Submitted";


    async Task HandleSubmit()
    {
        if (Id is null)
        {
            TransactionService.CreateTransaction(Transaction);
        }
        else
        {
            TransactionService.UpdateTransaction((int)Id, Transaction);
        }
    }
    public void BackToTransactions()
    {
        NavigationManager.NavigateTo("/transactions");
    }

    private void CustomerFromDdw(ChangeEventArgs args)
    {
        if (args.Value is not null)
        {
            if (Convert.ToString(args.Value) != "-1")
            {
                int idCustomer = Convert.ToInt32(args.Value);
                Customer customer = CustomerService.GetCustomerById(Convert.ToInt32(args.Value));
                Transaction.IdCard = customer.TimeStampIdCard;
                Transaction.Points = customer.Points;
            }
            else
            {
                Transaction.IdCard = null;
                Transaction.Points = null;
            }

        }

    }

    private void CalculateDiscount(ChangeEventArgs args)
    {
        if (!string.IsNullOrEmpty(args.Value.ToString()))
        {
            if (Convert.ToString(args.Value) != "-1")
            {
                int Purchase = Convert.ToInt32(args.Value);
                decimal? PointsEarnedFromLastPurchase = 0;
                decimal lastpointssaved = 0;
                //int? pointfromobj = Transaction.Points;

                var pointspermoney = PointsPerMoneyService.GetAllPointsPerMoney();
                if (pointspermoney is null)
                {

                }
                else
                {
                    lastpointssaved = PointsPerMoneyService.GetLastPointPerMoneySaved();
                    if (lastpointssaved != null)
                    {
                        PointsEarnedFromLastPurchase = lastpointssaved * Purchase;
                        //var points = PointsEarnedFromLastPurchase + pointfromobj;
                        PointOfCurrentTransaction = Convert.ToInt32(PointsEarnedFromLastPurchase);
                        //Transaction.Points = Convert.ToInt32(points);
                    }
                    DiscountList = DiscountService.GetAllDiscount().ToList().Where(x => x.PointsNeeded <= Purchase);
                    IdDiscount = Transaction.Discount.ToString();
                }



            }
            else
            {
                Transaction.IdCard = null;
                Transaction.Points = null;
            }

        }
    }


    public void DiscountFromDdw(ChangeEventArgs args)
    {
        string discount = Convert.ToString(args.Value);


        //DiscountList = DiscountService.GetAllDiscount(Transaction.Purchase).ToList();
        //IdDiscount = Transaction.Discount.ToString();
    }

    //public void HandleValidSubmit()
    //{
    //    btnText = Id == null ? "Save new Customer" : "Update Customer";
    //    Context.Add(CustomerService);
    //    Context.SaveChanges();
    //    FormSubmitMessage = "Form Data Submitted";
    //}

    //public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Data Submitted";
}
