@page "/ttransaction"
@page "/ttransaction/{id:int}"
@using CardsCustomers.Models.Services;
@using CardsCustomers.Models;
@using Microsoft.AspNetCore.Mvc.Rendering;
@inject ITransactionService TransactionService
@inject ICustomerService CustomerService
@inject IPointsPerMoneyService PointsPerMoneyService
@inject IDiscountService DiscountService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _authenticationStateProvider


@*<h3>Customer</h3>*@
<button type="submit" class="btn btn-outline-primary"
        @onclick="@(() => BackToTransactions())">
    Back to Transactions
</button>
<br />
@if (Id is null)
{
    <PageTitle>Create a new Transaction </PageTitle>
    <h3 class="text-center">Create a New Transaction</h3>
}
else
{
    <PageTitle>Edit Transaction </PageTitle>
    <h3 class="text-center">Edit Transaction</h3>
}

<EditForm Model="Transaction" OnSubmit="HandleValidSubmit">

    <hr />

    <div class="row mt-3">
        <label for="client" class="col-sm-2 col-form-label">Client</label>
        <div class="col-sm-4">
            <InputSelect id="client" @bind-Value="Transaction.IdCustomer" disabled=@IsInViewMode @oninput="CustomerFromDdw"
                         class="form-select">

                <option value="-1"> -- Select -- </option>

                @foreach (var cust in CustomerList)
                {
                    var customerInfo = @cust.Name + " " + @cust.Surname;
                    <option value="@cust.IdCustomer" @key="@cust.IdCustomer">@customerInfo</option>
                }

            </InputSelect>
        </div>
    </div>

    <div class="row mt-3">
        <label for="cardId" class="col-sm-2 col-form-label">
            Card Id
        </label>
        <div class="col-sm-4">
            <InputText id="cardId" class="form-control"
                       @bind-Value="Transaction.IdCard" readonly="@true" />
        </div>
    </div>
    <div class="row mt-3">
        <label for="points" class="col-sm-2 col-form-label">
            Points
        </label>
        <div class="col-sm-4">
            <InputNumber id="points" class="form-control" readonly="@true"
                         @bind-Value="Transaction.Points" />
        </div>
    </div>
    <div class="row mt-3">
        <label for="purchase" class="col-sm-2 col-form-label">
            Purchase
        </label>
        <div class="col-sm-4">
            <InputNumber id="purchase" class="form-control" readonly="@IsInViewMode"
                         @bind-Value="Transaction.Purchase" @oninput="CalculatePoints"
                         required="@true" />
        </div>
    </div>

    <div class="row mt-3">
        <label for="discount" class="col-sm-2 col-form-label">
            Discount
        </label>
        <div class="col-sm-4">
            <InputSelect id="discount" @bind-Value="Transaction.Discount" disabled=@IsInViewMode @oninput="DiscountFromDdw" class="form-select">
                <option value="-1"> -- Select -- </option>
                @if(IdDiscountFromDdw.HasValue && IdDiscountFromDdw!=-1)
                {
                    <option value="@IdDiscountFromDdw" selected @key="@IdDiscountFromDdw">@DiscountList.FirstOrDefault(x=>x.IdDiscount==IdDiscountFromDdw.Value).DiscountName</option>
                }
                else
                {
                    @foreach (var disc in DiscountList)
                    {
                        var element = @disc.DiscountName + " - " + @disc.PointsNeeded + " Points Nedded";
                        <option value="@disc.IdDiscount" @key="@disc.IdDiscount">@element</option>
                    }
                }
               

            </InputSelect>
        </div>

        <label for="points" class="col-sm-2 col-form-label">
            Points of This Purchase
        </label>
        <div class="col-sm-2">
            <InputNumber id="points" class="form-control"
                         @bind-Value="Transaction.PointsFromCurTrans" readonly="@true" />
        </div>
    </div>

    <div class="row mt-3">
        <label for="newvalue" class="col-sm-2 col-form-label">
            New Value To Pay
        </label>
        <div class="col-sm-4">
            <InputNumber id="newvalue" class="form-control"
                         @bind-Value="Transaction.NewValue" readonly="@true" />
        </div>
    </div>

    <div class="row mt-3">
        <label for="balance" class="col-sm-2 col-form-label">
            Points Balance
        </label>
        <div class="col-sm-4">
            <InputNumber id="balance" class="form-control"
                         @bind-Value="Transaction.Balance" readonly="@true" />
        </div>
    </div>
    <div class="col-sm-2 row mt-3"> <button type="submit" class="btn btn-primary" disabled=@IsInViewMode>@btnText</button></div>


</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    [Inject]
    DbCoreloginContext Context { get; set; }
    Transaction Transaction { get; set; } = new Transaction();
    public IEnumerable<Transaction> AllTransactions { get; set; }
    public List<Customer> CustomerList { get; set; } = new List<Customer>();
    public IEnumerable<Discount> DiscountList { get; set; } = new List<Discount>();
    public bool IsInViewMode { get; set; }
    public Customer customer { get; set; }

    private int IdCustomerValueDdw { get; set; }
    public int? CustomerPointsUpdated { get; set; }
    private int? IdDiscountFromDdw { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Id is not null)
            {
                IsInViewMode = true;
                var result = TransactionService.GetTransactionById(Id);
                if (result is not null)
                {
                    Transaction = result;
                }
                else
                {
                    NavigationManager.NavigateTo("/ttransaction");
                }
            }
            else
            {
                IsInViewMode = false;
            }
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }
    protected async override Task OnInitializedAsync()
    {

        try
        {
            btnText = Id == null ? "Save new Transaction" : "Update Transaction";

            if ( CustomerList.Count==0)
            {
                CustomerList = (await TransactionService.GetCustomers()).ToList();
            }



            if (Id is not null)
            {
                Transaction = TransactionService.GetTransactionById(Id);
                DiscountList = DiscountService.GetAllDiscount().Where(x=>x.IdDiscount==Transaction.Discount.Value).ToList();//ddw of discounts after event gets null
                IdDiscountFromDdw = Transaction.Discount;
            }
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }

    public string FormSubmitMessage { get; set; } = "Form Data Not Submitted";


    async Task HandleValidSubmit()
    {
        try
        {
            if (Id is null)
            {
                var authstate = await _authenticationStateProvider.GetAuthenticationStateAsync();
                var user = authstate.User;
                var name = user.Identity.Name;
                Transaction.IdUserAdmin = CustomerService.GetCustomerByUserName(name.ToString());
                Transaction.Points = Transaction.PointsFromCurTrans.Value + customer.Points;
                TransactionService.CreateTransaction(Transaction);

                //must update customers points
                if (CustomerPointsUpdated.HasValue)
                {
                    customer.Points = CustomerPointsUpdated.Value;
                }
                else
                {
                    customer.Points = Transaction.Balance;
                }

                CustomerService.UpdateCustomerWithoutRedirect(customer.IdCustomer, customer);
            }
            else
            {
                TransactionService.UpdateTransaction((int)Id, Transaction);
            }
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }
    public void BackToTransactions()
    {
        try
        {
            NavigationManager.NavigateTo("/transactions");
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }

    private void CustomerFromDdw(ChangeEventArgs args)
    {
        try
        {
            if (args.Value is not null)
            {
                if (Convert.ToString(args.Value) != "-1")
                {
                    IdCustomerValueDdw = Convert.ToInt32(args.Value);
                    customer = CustomerService.GetCustomerById(Convert.ToInt32(args.Value));
                    Transaction.IdCard = customer.TimeStampIdCard;

                    Transaction.Points = customer.Points;

                }
                else
                {
                    Transaction.IdCard = null;
                    Transaction.Points = 0;
                }

            }
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }


    }

    private void CalculatePoints(ChangeEventArgs args)
    {
        try
        {
            if (!string.IsNullOrEmpty(args.Value.ToString()))
            {
                if (Convert.ToString(args.Value) != "-1")
                {
                    int Purchase = Convert.ToInt32(args.Value);
                    decimal? PointsEarnedFromLastPurchase = 0;
                    decimal? lastpointssaved = null;
                    Transaction.Balance = 0;
                    Transaction.Discount = -1;

                    Transaction.Points = customer.Points;


                    Transaction.NewValue = 0;
                    lastpointssaved = PointsPerMoneyService.GetLastPointPerMoneySaved();
                    if (lastpointssaved is null)
                    {
                        throw new InvalidOperationException("An error occured!");
                    }
                    else
                    {

                        PointsEarnedFromLastPurchase = lastpointssaved * Purchase;
                        Transaction.PointsFromCurTrans = Convert.ToInt32(PointsEarnedFromLastPurchase);
                        Transaction.Balance = Transaction.PointsFromCurTrans.Value + customer.Points;


                        DiscountList = DiscountService.GetAllDiscount().ToList().Where(x => x.IdDiscount <= Transaction.Balance);

                    }



                }
                else
                {
                    Transaction.IdCard = null;
                    Transaction.Points = 0;
                }

            }
        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }


    public void DiscountFromDdw(ChangeEventArgs args)
    {

        try
        {
            if (args.Value.ToString() != "-1")
            {

                IdDiscountFromDdw = Convert.ToInt32(args.Value);
                Discount discount = DiscountService.GetDiscountById(Convert.ToInt32(IdDiscountFromDdw));
                decimal discountPercent = Convert.ToDecimal(discount.DiscountPercent) / 100;
                Transaction.Discount = Convert.ToInt32(IdDiscountFromDdw);
                //llogaritja e vleres qe duhet zbritur cmimit
                var cmimiaktual = Transaction.Purchase;
                var skontoezgjedhur = discountPercent;
                var valueToDiscount = cmimiaktual * discountPercent;
                Transaction.NewValue = Transaction.Purchase - Convert.ToDecimal(valueToDiscount);
                Transaction.Balance = customer.Points ;

                //must update the customer points
                CustomerPointsUpdated = Transaction.Balance;
                Transaction.PointsFromCurTrans = 0;// if chosed one discount points of this purchase will remain 0
                DiscountList = DiscountService.GetAllDiscount().ToList();//ddw of discounts after event gets null
            }
            else
            {
                Transaction.NewValue = 0;
                Transaction.Balance = 0;
            }



        }
        catch (Exception)
        {

            throw new InvalidOperationException("An error occured while opening the page!");
        }

    }

}
